 <?php
 /**
 *@file
 * Mosters installation
 */

 /**
 * Implements hook_install().
 */

 function monsters_install() {
 	// Set default variables.
 	variable_set('monsters_gmap', 1);
 	variable_set('monsters_default_centre_lat', -34.397);
 	variable_set('monsters_default_centre_long', 150.644);
 	variable_set('monsters_default_gmap_zoom', 8);

 	// Get localisation function for installation as t() may not be available.
 	$t = get_t();

 	// Give user feedback.
 	drupal_set_message($t('Monsters variables have been created.'));
 

 	// Content type definition
 	$content_type = array(
 		'type' => 'monsters',
 		'name' => $t('Monsters'),
 		'description' => $t('A monster and where it was spotted.'),
 		'title_label' => $t('Monster Name'),
 		'base' => 'node_content',
 		'custom' => TRUE,
 	);

 	// Set remaining definitions with defaults.
 	$node_type = node_type_set_defaults($content_type);

 	// Save the content type.
 	node_type_save($node_type);

 	// Add a field for the body.
 	node_add_body_field($node_type, $t('Description'));

 	// Create fields.
 	$fields = array();

 	// Monster_aggression_level - alternative list dropdown layout
 /*
	function monster_aggression_list() {
		return array (
			'1' => t('Calm'),
			'2' => t('Confused'),
			'3' => t('Agitated'),
			'4' => t('Keen to pursue'),
			'5' => t('Blood thirsty')
		);
	}
*/
 	$fields['monster_aggression_level'] = array(
 		'field_name' => 'monster_aggression_level',
 		'type' => 'list_integer',
 		'active' => 1,
 		// Optional.
 		'cardinality' => 1,
 		'settings' => array(
 			'allowed_values' => array(
 				'1' => t('Calm'),
				'2' => t('Confused'),
				'3' => t('Agitated'),
				'4' => t('Keen to pursue'),
				'5' => t('Blood thirsty')
 			),
 			//'allowed_values_function' => 'monster_aggression_list',
 		),
 	);
 	/*
	$mon_agg = field_info_field('monster_aggression_level');
	unset($mon_agg['settings']['allowed_values']);
	$mon_agg['settings']['allowed_values_function'] = 'monster_aggression_list';
	field_update_field($mon_agg);

 	$fields['monster_aggression_level'] = array(
 		'field_name' => 'monster_aggression_level',
 		'type' => 'number_integer',
 		// Optional.
 		'cardinality' => 1,
 		'settings' => array(
 			'max_length' => 1,
 		),
 	);
*/
 	$fields['monster_witnessed_by'] = array(
 		'field_name' => 'monster_witnessed_by',
 		'type' => 'text',
 		'settings' => array(
 			'max_length' => 30,
 		),
 	);

 	$fields['monster_latitude'] = array(
 		'field_name' => 'monster_latitude',
 		'type' => 'number_float',
 		'settings' => array(
 			'max_length' => 20,
 		),
 	);

 	$fields['monster_longitude'] = array(
 		'field_name' => 'monster_longitude',
 		'type' => 'number_float',
 		'settings' => array(
 			'max_length' => 20,
 		),
 	);

 	foreach ($fields as $field) {
 		field_create_field($field);
 	}

 	//Create field instances.
 	$instances = array();

 	 	// Monster_aggression_level - alternative list dropdown layout

 	$instances['monster_aggression_level'] = array(
 		'field_name' => 'monster_aggression_level',
 		'label' => $t('Aggression Level'),
 		'description' => $t('How aggressive or aware the specimen was.'),
 		'widget' => array(
 			'type' => 'options_select',
 		),
 		'required' => TRUE,
 		'settings' => array(
 			'text_processing' => 0,
 		),
 	);

/*
 	$instances['monster_aggression_level'] = array(
 		'field_name' => 'monster_aggression_level',
 		'label' => $t('Aggression Level'),
 		'description' => $t('Aggressiveness of monster; 1 represents a calm encounter, or up to 5 for bloodthirsty.'),
 		'widget' => array(
 			'type' => 'text_textfield',
 		),
 		'required' => TRUE,
 		'settings' => array(
 			'text_processing' => 0,
 		),
 	);
*/
 	$instances['monster_witnessed_by'] = array(
 		'field_name' => 'monster_witnessed_by',
 		'label' => $t('Witnessed By'),
 		'description' => $t('The name of the witness who spotted and reported this foul specimen.'),
 		'widget' => array(
 			'type' => 'text_textfield',
 		),
 		'required' => TRUE,
 		// Optional to display label inline.
 		/*
 		'display' => array(
 			'default' => array(
 				'label' => 'inline',
 			),
 		),
 		*/

 	);

 	$instances['monster_latitude'] = array(
 		'field_name' => 'monster_latitude',
 		'label' => $t('Latitude'),
 		'description' => $t('Signed degrees format (DDD.dddd).'),
 		'widget' => array(
 			'type' => 'text_textfield',
 		),
 		'required' => TRUE,
 		'settings' => array(
 			'text_processing' => 0,
 		),
 		// Option to hide display from user.
 		/*
 		'display' => array(
 			'default' => array(
 				'type' => 'hidden',
 			),
 		),
 		*/
 	);

 	$instances['monster_longitude'] = array(
 		'field_name' => 'monster_longitude',
 		'label' => $t('Longitude'),
 		'description' => $t('Signed degrees format (DDD.dddd).'),
 		'widget' => array(
 			'type' => 'text_textfield',
 		),
 		'required' => TRUE,
 		'settings' => array(
 			'text_processing' => 0,
 		),
 		// Option to hide display from user.
 		/*
 		'display' => array(
 			'default' => array(
 				'type' => 'hidden',
 			),
 		),
 		*/
 	);

 	foreach ($instances as $instance) {
 		$instance['entity_type'] = 'node';
 		$instance['bundle'] = 'monsters';
 		field_create_instance($instance);
 	}

 }

 /**
 * Implements hook_uninstall().
 */

 function monsters_uninstall() {
 	// Delete variables.
  	variable_del('monsters_gmap');
 	variable_del('monsters_default_centre_lat');
 	variable_del('monsters_default_centre_long');
 	variable_del('monsters_default_gmap_zoom');

 	// Inform user of the removal
 	$t = get_t();
 	drupal_set_message($t('Monsters variables removed.'));

 	// Remove all node IDs with Monster content type.
 	$sql_query = 'SELECT nid ';
 	$sql_query .= 'FROM {node} ';
 	$sql_query .= 'WHERE {node}.type = :type ';
 	$result = db_query($sql_query, array(':type' => 'monsters'));

 	$nids = array();
 	foreach ($result as $row) {
 		$nids[] = $row->nid;
 	}

 	// Delete all monsters content.
 	node_delete_multiple($nids);
 	drupal_set_message($t('Monsters content removed.'));

 	// Remove all fields and field instances.
 	foreach (field_info_instances('node', 'monsters') as $field_name => $instance) {

 		field_delete_instance($instance);
 	}
 	drupal_set_message($t('Monsters field and field instances removed.'));

 	// Delete the content type.
 	node_type_delete('monsters');
 	drupal_set_message($t('Monsters Content Type removed.'));

 	// Clean up deleted fields.
 	field_purge_batch(1000);
 }